<?php
namespace jc\test\unit\testcase\jc\fs;


/**
 * Test class for FileSystem.
 * Generated by PHPUnit on 2011-08-18 at 13:46:32.
 */
class FileSystem extends \PHPUnit_Framework_TestCase
{
    /**
     * @var jc\fs\FileSystem
     */
    protected $aFileSystem;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->aFileSystem = new \jc\fs\imp\MockFileSystem(\jc\test\unit\PATH_DATA_ROOT);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testFind().
     */
    public function testFind()
    {
        $this->assertEquals(
        		$this->aFileSystem->find('/a.txt'),
        		new \jc\fs\imp\MockFSO($this->aFileSystem,'/a.txt')
        );
    }

    /**
     * @todo Implement testFindFile().
     */
    public function testFindFile()
    {
        $this->assertEquals(
        		$this->aFileSystem->findFile('/a.txt'),
        		new \jc\fs\imp\MockFSO($this->aFileSystem,'/a.txt')
        );
    }

    /**
     * @todo Implement testFindFolder().
     */
    public function testFindFolder()
    {
        $this->assertNull(
        		$this->aFileSystem->findFolder('/a.txt')
        );
    }

    /**
     * @todo Implement testDirectory().
     */
    public function testDirectory()
    {
        $aFSO=$this->aFileSystem->find('/folder1/a.cpp');
        $aFolder=$this->aFileSystem->find('/folder1');
        $this->assertEquals(
        		$this->aFileSystem->directory($aFSO),
        		$aFolder
        );
    }

    /**
     * @todo Implement testSetFSOFlyweight().
     */
    public function testSetFSOFlyweight()
    {
        $aFSO = new \jc\fs\imp\MockFSO($this->aFileSystem);
        $this -> aFileSystem -> setFSOFlyweight("/a.txt",$aFSO);
        $this->assertTrue(
        		$this->aFileSystem->find("/a.txt") === $aFSO
        );
    }

    /**
     * @todo Implement testMount().
     */
    public function testMount()
    {
        $anotherFileSystem = new \jc\fs\imp\MockFileSystem(\jc\test\unit\PATH_DATA_ROOT.'/xx');
    	$this->aFileSystem->mount('/aaa',$anotherFileSystem);
    	$this->assertEquals(
    			$this->aFileSystem->find('/aaa/bbb'),
    			new \jc\fs\imp\MockFSO($anotherFileSystem,'/bbb')
    	);
    }

    /**
     * @todo Implement testUmount().
     */
    public function testUmount()
    {
        $anotherFileSystem = new \jc\fs\imp\MockFileSystem(\jc\test\unit\PATH_DATA_ROOT.'/xx');
    	$this->aFileSystem->mount('/aaa',$anotherFileSystem);
    	$this->assertEquals(
    			$this->aFileSystem->find('/aaa/bbb'),
    			new \jc\fs\imp\MockFSO($anotherFileSystem,'/bbb')
    	);
    	$this->aFileSystem->umount('/aaa');
    	$this->assertEquals(
    			$this->aFileSystem->find('/aaa/bbb'),
    			new \jc\fs\imp\MockFSO($this->aFileSystem,'/aaa/bbb')
    	);
    }

    /**
     * @todo Implement testExists().
     */
    public function testExists()
    {
        $this->assertTrue(
        		$this->aFileSystem->exists('/aaa')
        );
    }

    /**
     * @todo Implement testIsFile().
     */
    public function testIsFile()
    {
        $this->assertTrue(
        		$this->aFileSystem->isFile('/aaa')
        );
    }

    /**
     * @todo Implement testIsFolder().
     */
    public function testIsFolder()
    {
        $this->assertFalse(
        		$this->aFileSystem->isFolder('/aaa')
        );
    }

    /**
     * @todo Implement testCopy().
     */
    public function testCopy()
    {
        $this->aFileSystem->copy('/aaa','/bbb');
    }

    /**
     * @todo Implement testMove().
     */
    public function testMove()
    {
        $this->aFileSystem->move('/aaa','/bbb');
    }

    /**
     * @todo Implement testCreateFile().
     */
    public function testCreateFile()
    {
        $this->aFileSystem->createFile('/aaa');
    }

    /**
     * @todo Implement testCreateFolder().
     */
    public function testCreateFolder()
    {
    	$this->setExpectedException(
    		'jc\lang\Exception','试图创建Folder，但由于存在同名File无法创建'
    	);
        $this->aFileSystem->createFolder('/aaa');
    }

    /**
     * @todo Implement testDelete().
     */
    public function testDelete()
    {
        $this->aFileSystem->delete('/aaa');
    }

    /**
     * @todo Implement testMounted().
     */
    public function testMounted()
    {
    	$this->setExpectedException(
    		'jc\lang\Exception','试图创建Folder，但由于存在同名File无法创建'
    	);
        $this->assertNull($this->aFileSystem->mounted());
    	$anotherFileSystem = new \jc\fs\imp\MockFileSystem(\jc\test\unit\PATH_DATA_ROOT.'/xx');
    	$anotherFileSystem -> mount('/aaa',$this->aFileSystem);
    	$this->assertEquals(
//    			$this->aFileSystem->mounted(),
    			null,
    			$anotherFileSystem->createFolder('/aaa')
    	);
    }

    /**
     * @todo Implement testMountedPath().
     */
    public function testMountedPath()
    {
        $anotherFileSystem = new \jc\fs\imp\MockFileSystem(\jc\test\unit\PATH_DATA_ROOT.'/xx');
    	$anotherFileSystem -> mount('/aaa',$this->aFileSystem);
    	$this->assertEquals( $this->aFileSystem->mountedPath(),'/aaa');
    }

    /**
     * @todo Implement testRootFileSystem().
     */
    public function testRootFileSystem()
    {
        $this->assertEquals($this->aFileSystem->rootFileSystem(),$this->aFileSystem);
        $anotherFileSystem = new \jc\fs\imp\MockFileSystem(\jc\test\unit\PATH_DATA_ROOT.'/xx');
    	$anotherFileSystem -> mount('/aaa',$this->aFileSystem);
    	$this->assertEquals($this->aFileSystem->rootFileSystem(),$anotherFileSystem);
    }

    /**
     * @todo Implement testIsCaseSensitive().
     */
    public function testIsCaseSensitive()
    {
        $this->assertTrue(
        		$this->aFileSystem->isCaseSensitive()
        );
    }

    /**
     * @todo Implement testSetCaseSensitive().
     */
    public function testSetCaseSensitive()
    {
        $this->assertTrue(
        		$this->aFileSystem->isCaseSensitive()
        );
    	$this->aFileSystem->setCaseSensitive(false);
    	$this->assertFalse(
    			$this->aFileSystem->isCaseSensitive()
    	);
    	$this->aFileSystem->setCaseSensitive(true);
    	$this->assertTrue(
    			$this->aFileSystem->isCaseSensitive()
    	);
    }

    /**
     * @todo Implement testFormatPath().
     */
    public function testFormatPath()
    {
        $arrTestPath=array(
        				'//home/elephant/./../gituser/elephant/' => '/home/gituser/elephant/' ,
        );
        foreach($arrTestPath as $strPath => $strAns)
        {
        	$this->assertEquals(
        			$this->aFileSystem->formatPath($strPath),
        			$strAns
        	);
        	$this->assertEquals(
        			\jc\fs\FileSystem::formatPath($strPath),
        			$strAns
        	);
        }
    }

    /**
     * @todo Implement testRelativePath().
     */
    public function testRelativePath()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
?>
