<?php
namespace jc\test\unit\testcase\jc\fs\imp;


/**
 * Test class for LocalFSO.
 * Generated by PHPUnit on 2011-08-13 at 10:44:31.
 */
class LocalFSO extends \PHPUnit_Framework_TestCase
{
    /**
     * @var LocalFSO
     */
    protected $object;
    const strFileSystemLocalPath=\jc\test\unit\PATH_DATA_ROOT;
    const strFSOPath='/localfso.txt';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $aFileSystem = new \jc\fs\imp\LocalFileSystem(self::strFileSystemLocalPath);
    	$this->object=new \jc\fs\imp\MockLocalFSO(
    						$aFileSystem,
    						self::strFSOPath,
    						self::strFileSystemLocalPath.self::strFSOPath
    				);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testLocalPath().
     */
    public function testLocalPath()
    {
        $this->assertEquals(
        				$this->object->localPath(),
        				self::strFileSystemLocalPath.self::strFSOPath
        		);
    }

    /**
     * @todo Implement testCanRead().
     */
    public function testCanRead()
    {
        $this->assertTrue($this->object->canRead());
    }

    /**
     * @todo Implement testCanWrite().
     */
    public function testCanWrite()
    {
        $this->assertTrue($this->object->canWrite());
    }

    /**
     * @todo Implement testCanExecute().
     */
    public function testCanExecute()
    {
        $this->assertFalse($this->object->canExecute());
    }

    /**
     * @todo Implement testPerms().
     */
    public function testPerms()
    {
    	$ia=
    		(0x8000 |
    		0645 );
        $this->assertEquals( $this->object->perms() , $ia);
    }

    /**
     * @todo Implement testSetPerms().
     */
    public function testSetPerms()
    {
    	$ia = $this->object->perms();
    	$nMode = 1;
    	$this->object->setPerms($ia | $nMode);
    	$this->assertEquals( $this->object->perms() , $ia | $nMode);
    }

    /**
     * @todo Implement testCreateTime().
     */
    public function testCreateTime()
    {
    	echo "\nctime:";
        echo $this->object->createTime();
        echo "\n";
    }

    /**
     * @todo Implement testModifyTime().
     */
    public function testModifyTime()
    {
    	echo "\nmtime:";
        echo $this->object->modifyTime();
        echo "\n";
    }

    /**
     * @todo Implement testAccessTime().
     */
    public function testAccessTime()
    {
    	echo "\natime:";
        echo $this->object->accessTime();
        echo "\n";
    }

    /**
     * @todo Implement testIsHidden().
     */
    public function testIsHidden()
    {
        $this->assertFalse($this->object->isHidden());
    }

    /**
     * @todo Implement testCopy().
     */
    public function testCopy()
    {
    	$this->setExpectedException(
    			'jc\lang\Exception' ,
    			'this即不是IFile也不是IFolder'
    	);
        $this->object->copy('/c.txt');
    }

    /**
     * @todo Implement testMove().
     */
    public function testMove()
    {
    	$this->setExpectedException(
    			'jc\lang\Exception' ,
    			'this即不是IFile也不是IFolder'
    	);
        $this->object->move('/c.txt');
    }

    /**
     * @todo Implement testUrl().
     */
    public function testUrl()
    {
        $this->assertEquals(
        			$this->object->url(),
        			'file://'.self::strFileSystemLocalPath.self::strFSOPath
        	);
    }
}
?>
