<?php
namespace jc\test\unit\testcase\jc\mvc\model\db\orm;


/**
 * Test class for Prototype.
 * Generated by PHPUnit on 2011-10-08 at 09:04:51.
 */
class Prototype extends \PHPUnit_Framework_TestCase
{
    /**
     * @var jc\mvc\model\db\orm\Prototype
     */
    protected $aPrototype;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->aPrototype = \jc\mvc\model\db\orm\Prototype::create('test');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testCreate().
     */
    public function testCreate()
    {
        $a = \jc\mvc\model\db\orm\Prototype::create('test');
        $this->assertNotNull($a);
    }

    /**
     * @todo Implement testName().
     */
    public function testName()
    {
        $this->assertEquals($this->aPrototype->name(),'test');
    }

    /**
     * @todo Implement testSetName().
     */
    public function testSetName()
    {
        $this->aPrototype->setName('nottest');
        $this->assertEquals($this->aPrototype->name(),'nottest');
    }

    /**
     * @todo Implement testKeys().
     */
    public function testKeys()
    {
        $this->assertEquals(
            $this->aPrototype->keys(),
            array());
    }

    /**
     * @todo Implement testSetKeys().
     */
    public function testSetKeys()
    {
        $this->aPrototype->setKeys('keys');
        $this->assertEquals(
            $this->aPrototype->keys(),
            array('keys'));
        $this->aPrototype->setKeys(array('keys1','keys2'));
        $this->assertEquals(
            $this->aPrototype->keys(),
            array('keys1','keys2'));
        $this->aPrototype->setKeys($this);
        $this->assertEquals(
            $this->aPrototype->keys(),
            array('keys1','keys2'));
    }

    /**
     * @todo Implement testTableName().
     */
    public function testTableName()
    {
        $this->assertEquals(
            $this->aPrototype->tableName(),
            'test');
    }

    /**
     * @todo Implement testSetTableName().
     */
    public function testSetTableName()
    {
        $str = 'testSetTableName';
        $this->aPrototype->setTableName($str);
        $this->assertEquals(
            $this->aPrototype->tableName(),
            $str);
    }

    /**
     * @todo Implement testCirteria().
     */
    public function testCirteria()
    {
        $this->assertNull($this->aPrototype->cirteria());
    }

    /**
     * @todo Implement testAssociateBy().
     */
    public function testAssociateBy()
    {
        $this->assertNull($this->aPrototype->associateBy());
        $anotherPrototype = \jc\mvc\model\db\orm\Prototype::create('another');
        $this->aPrototype->hasOne($anotherPrototype);
        $this->assertEquals($anotherPrototype->associateBy()->fromPrototype(),$this->aPrototype);
    }

    /**
     * @todo Implement testColumns().
     */
    public function testColumns(){
        $this->assertEquals(
            $this->aPrototype->columns(),
            array());
    }

    /**
     * @todo Implement testAddColumn().
     */
    public function testAddColumn()
    {
        $arrColumns = $this->aPrototype->columns();
        $this->aPrototype->addColumn('abc');
        $arrColumns []='abc';
        $this->assertEquals( $this->aPrototype->columns(),$arrColumns);
        $arrAdd = array ('add1','add2');
        $this->aPrototype->addColumn($arrAdd);
        $this->assertEquals( $this->aPrototype->columns(),array_merge($arrColumns,$arrAdd));
        $this->aPrototype->addColumn($this);
        $this->assertEquals( $this->aPrototype->columns(),array_merge($arrColumns,$arrAdd));
    }

    /**
     * @todo Implement testRemoveColumn().
     */
    public function testRemoveColumn()
    {
        $this->aPrototype->removeColumn('函数未完成');
        $this->assertEquals( $this->aPrototype->columns(),array());
    }

    /**
     * @todo Implement testClearColumns().
     */
    public function testClearColumns()
    {
        $this->aPrototype->clearColumns();
        $this->assertEquals( $this->aPrototype->columns(),array());
    }

    /**
     * @todo Implement testColumnIterator().
     */
    public function testColumnIterator()
    {
        $iterator = $this->aPrototype->columnIterator();
        $arr = array();
        foreach($iterator as $v){
            $arr[]= $v;
        }
        $this->assertEquals($arr,$this->aPrototype->columns());
    }

    /**
     * @todo Implement testColumnAliases().
     */
    public function testColumnAliases(){
        $this->assertEquals( $this->aPrototype->columnAliases(),array());
    }

    /**
     * @todo Implement testGetColumnByAlias().
     */
    public function testGetColumnByAlias(){
        $this->aPrototype->addColumnAlias('column','alias');
        $this->assertEquals( $this->aPrototype->getColumnByAlias('alias'),'column');
    }
    /**
     * @todo Implement testAddColumnAlias().
     */
    public function testAddColumnAlias()
    {
        $this->aPrototype->addColumnAlias('column','alias');
        $this->assertEquals( $this->aPrototype->getColumnByAlias('alias'),'column');
    }

    /**
     * @todo Implement testRemoveColumnAlias().
     */
    public function testRemoveColumnAlias()
    {
        $this->aPrototype->addColumnAlias('column','alias');
        $this->aPrototype->removeColumnAlias('alias');
        $this->assertEquals( $this->aPrototype->getColumnByAlias('alias'),'');
    }

    /**
     * @todo Implement testClearColumnAliases().
     */
    public function testClearColumnAliases()
    {
        $this->aPrototype->addColumnAlias('column','alias');
        $this->assertEquals($this->aPrototype->columnAliases(),array('alias'=>'column'));
        $this->aPrototype->clearColumnAliases();
        $this->assertEquals($this->aPrototype->columnAliases(),array());
    }

    /**
     * @todo Implement testAliasColumnMapIterator().
     */
    public function testAliasColumnMapIterator()
    {
        $this->aPrototype->addColumnAlias('column','alias');
        $arr = array();
        foreach($this->aPrototype->aliasColumnMapIterator() as $k => $v){
            $arr[$k]=$v;
        }
        $this->assertEquals($this->aPrototype->columnAliases(),$arr);
    }

    /**
     * @todo Implement testAssociations().
     */
    public function testAssociations(){
        $this->assertEquals($this->aPrototype->associations(),array());
    }
    /**
     * @todo Implement testHasOne().
     */
    public function testHasOne()
    {
        $this->assertNull($this->aPrototype->associateBy());
        $anotherPrototype = \jc\mvc\model\db\orm\Prototype::create('another');
        $this->aPrototype->hasOne($anotherPrototype);
        $this->assertEquals($anotherPrototype->associateBy()->fromPrototype(),$this->aPrototype);
    }

    /**
     * @todo Implement testHasMany().
     */
    public function testHasMany()
    {
        $this->assertNull($this->aPrototype->associateBy());
        $anotherPrototype = \jc\mvc\model\db\orm\Prototype::create('another');
        $this->aPrototype->hasMany($anotherPrototype);
        $this->assertEquals($anotherPrototype->associateBy()->fromPrototype(),$this->aPrototype);
    }

    /**
     * @todo Implement testBelongsTo().
     */
    public function testBelongsTo()
    {
        $this->assertNull($this->aPrototype->associateBy());
        $anotherPrototype = \jc\mvc\model\db\orm\Prototype::create('another');
        $this->aPrototype->BelongsTo($anotherPrototype);
        $this->assertEquals($anotherPrototype->associateBy()->fromPrototype(),$this->aPrototype);
    }

    /**
     * @todo Implement testHasAndBelongsTo().
     */
    public function testHasAndBelongsTo()
    {
        $this->assertNull($this->aPrototype->associateBy());
        $anotherPrototype = \jc\mvc\model\db\orm\Prototype::create('another');
        $this->aPrototype->hasAndBelongsTo($anotherPrototype,'bridge');
        $this->assertEquals($anotherPrototype->associateBy()->fromPrototype(),$this->aPrototype);
    }

    /**
     * @todo Implement testAddAssociation().
     */
    public function testAddAssociation()
    {
        $this->assertNull($this->aPrototype->associateBy());
        $anotherPrototype = \jc\mvc\model\db\orm\Prototype::create('another');
        $this->aPrototype->addAssociation(\jc\mvc\model\db\orm\Association::hasOne,$anotherPrototype);
        $this->assertEquals($anotherPrototype->associateBy()->fromPrototype(),$this->aPrototype);
    }

    /**
     * @todo Implement testRemoveAssociation().
     */
    public function testRemoveAssociation()
    {
        $anotherPrototype = \jc\mvc\model\db\orm\Prototype::create('another');
        $this->aPrototype->addAssociation(\jc\mvc\model\db\orm\Association::hasOne,$anotherPrototype);
        $this->aPrototype->removeAssociation($anotherPrototype->associateBy());
        $this->assertEquals($this->aPrototype->associations(),array());
    }

    /**
     * @todo Implement testClearAssociations().
     */
    public function testClearAssociations()
    {
        $anotherPrototype = \jc\mvc\model\db\orm\Prototype::create('another');
        $this->aPrototype->addAssociation(\jc\mvc\model\db\orm\Association::hasOne,$anotherPrototype);
        $this->aPrototype->clearAssociations();
        $this->assertEquals($this->aPrototype->associations(),array());
    }

    /**
     * @todo Implement testAssociationIterator().
     */
    public function testAssociationIterator()
    {
        $anotherPrototype = \jc\mvc\model\db\orm\Prototype::create('another');
        $this->aPrototype->addAssociation(\jc\mvc\model\db\orm\Association::hasOne,$anotherPrototype);
        $arr = array();
        $it = $this->aPrototype->associationIterator();
        foreach($it as $v){
            $arr[] = $v;
        }
        $this->assertEquals($this->aPrototype->associations(),$arr);
    }
    
    /**
     * @todo Implement testDone().
     */
    public function testDone(){
        $hasOnePrototype = \jc\mvc\model\db\orm\Prototype::create('has_one');
        $this->aPrototype->addAssociation(\jc\mvc\model\db\orm\Association::hasOne,$hasOnePrototype)
                                ->setKeys('has_one_key')
                                ->done()
                            ->setKeys('test_key')
                            ->done();
        $this->assertEquals($hasOnePrototype->done(),$this->aPrototype);
    }
    public function testDone1(){
        $this->setExpectedException('jc\lang\Exception','no_key 的toKeys为空数组并且toPrototype的键也为空');
        $noKeyPrototype = \jc\mvc\model\db\orm\Prototype::create('no_key');
        $this->aPrototype->setKeys('test_key');
        $this->aPrototype->addAssociation(\jc\mvc\model\db\orm\Association::hasOne,$noKeyPrototype);
        $this->aPrototype->done();
    }
    public function testDone2(){
        $this->setExpectedException('jc\lang\Exception','bridge_to 的 类型为 hasAndBelongsTo 但 toBridgeKeys 为空数组');
        $anotherPrototype = \jc\mvc\model\db\orm\Prototype::create('bridge_to');
        $this->aPrototype->setKeys('test_key');
        $this->aPrototype->addAssociation(\jc\mvc\model\db\orm\Association::hasAndBelongsTo,$anotherPrototype,null,null,'bridge')
                                ->setKeys('bridge_to_key')
                                ->done()
                            ->done();
        $this->assertEquals($anotherPrototype->done(),$this->aPrototype);
    }
}
?>
